import java.util.*;
/*
2023.06.08
소요시간: 20분 (설계 17분, 구현 3분)

Goal: 슈트 구매자 이동하려는 거리 N일때, 사용해야 하는 건전지 사용량의 최솟값은? (== 점프기능 최소화)
유형: Input Size에 따라 O(logN), O(logk) 안에 해결해야 함

아이언슈트
기능 1. 한번에 K칸을 앞으로 점프 --> 건전지 사용 (per 거리)
기능 2. (현재까지 온 거리) x 2 위치로 순간이동 --> 건전지 사용 x

예제1, 2를 직접 그려보고 생각해보면 다음과 같은 사실을 도출할 수 있음.
사실1. 0 -> N이 아닌, N -> 0으로 역으로 접근하는게 훨씬 편하다. 그냥 직관적으로..
사실2. 홀수칸으로는 순간이동이 불가하다.
사실3. 순간이동으로 N까지 최대한 근접해야 한다.

[설계]
1. N부터 역으로 접근
2. 현 위치가 짝수면  --> 다음 위치는 현위치 / 2로 순간이동 
(순간이동으로 최대한 많이 이동해야하고, N부터 역으로 접근하고 있으니 짝수 나오면 바로 순간이동해야 함)
3. 현 위치가 홀수면 --> 다음위치는 현위치-1, 점프
(홀수칸으로 순간이동 불가하고, 점프는 최소화해야하니 바로 앞칸으로 점프해서 최대한 순간이동 많이하면서 많이 이동하게 해야하므로)
*/
public class Solution {
    public int solution(int n) {
        int curPos = n;
        int batteryCount = 0;
        while(curPos != 0) {
            if(curPos % 2 == 0) {
                curPos /= 2;
            } else {
                curPos -= 1;
                batteryCount++;
            }
        }
        return batteryCount;
    }
}
